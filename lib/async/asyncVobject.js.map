{"version":3,"sources":["../../src/async/asyncVobject.js"],"names":["asyncVobject","AsyncVObjectType","schema","validate","AsyncVType","s","os","v","o","objectType","keys","errors","all","map","key","ValidationError","length","expected","got"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAiBgBA,Y,GAAAA,Y;;AAfhB;;AACA;;AACA;;;;IAEaC,gB,WAAAA,gB;;;AAKX,4BAAYC,MAAZ,EAAuBC,QAAvB,EAA+D;AAAA;;AAAA,0JACvD,aADuD,EACxCA,QADwC;;AAE7D,UAAKD,MAAL,GAAcA,MAAd;AAF6D;AAG9D;;;EALOE,uB;;AAQH,SAASJ,YAAT,CACLK,CADK,EAEwD;AAAA;;AAC7D,MAAMC,KAAK,IAAIL,gBAAJ,CAAqBI,CAArB;AAAA,wFAAwB,kBAAME,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,eAD2B,GACvBC,iBAAWN,QAAX,CAAoBI,CAApB,CADuB;AAE3BG,kBAF2B,GAEpB,oBAAYL,CAAZ,CAFoB;AAG3BM,oBAH2B,GAGlB,EAHkB;AAAA;AAAA,qBAI3B,kBAAQC,GAAR,CACJF,KAAKG,GAAL;AAAA,qGAAS,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAECT,EAAES,GAAF,EAAOX,QAAP,CAAgBK,EAAEM,GAAF,CAAhB,CAFD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCAID,uBAAaC,gCAJZ;AAAA;AAAA;AAAA;;AAI6BJ,iCAAOG,GAAP;AAJ7B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAT;;AAAA;AAAA;AAAA;AAAA,kBADI,CAJ2B;;AAAA;AAAA,mBAc7B,mCAA2BH,MAA3B,EAAmCK,MAdN;AAAA;AAAA;AAAA;;AAAA,6BAerBD,gCAfqB;AAAA,6BAeOT,EAfP;AAAA;AAAA,qBAesBE,CAftB;;AAAA;AAAA;AAAA,6BAeyBG,MAfzB;AAAA;AAeHM,wBAfG;AAeWC,mBAfX;AAeyBP,sBAfzB;AAAA;AAAA;;AAAA;AAAA,gDAgB1BH,CAhB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA,MAAX;AAkBA,SAAOF,EAAP;AACD","file":"asyncVobject.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"../sync/ValidationError\";\nimport { AsyncVType } from \"./AsyncVType\";\nimport { objectType } from \"../sync/base\";\n\nexport class AsyncVObjectType<\n  S: { [key: string]: AsyncVType<any> },\n  T: $ObjMap<S, <F>(v: AsyncVType<F>) => F>\n> extends AsyncVType<T> {\n  schema: S;\n  constructor(schema: S, validate: (value: mixed) => Promise<T>) {\n    super(\"asyncObject\", validate);\n    this.schema = schema;\n  }\n}\n\nexport function asyncVobject<S: { [key: string]: AsyncVType<any> }>(\n  s: S\n): AsyncVObjectType<S, $ObjMap<S, <F>(v: AsyncVType<F>) => F>> {\n  const os = new AsyncVObjectType(s, async v => {\n    const o = objectType.validate(v);\n    const keys = Object.keys(s);\n    const errors = {};\n    await Promise.all(\n      keys.map(async key => {\n        try {\n          await s[key].validate(o[key]);\n        } catch (e) {\n          if (e instanceof ValidationError) errors[key] = e;\n          else throw e;\n        }\n      })\n    );\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: os, got: await o, errors });\n    return o;\n  });\n  return os;\n}\n"]}