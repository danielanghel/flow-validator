{"version":3,"sources":["../../src/async/asyncObject.js"],"names":["asyncObject","AsyncObjectType","schema","parse","AsyncType","s","os","v","objectType","o","validate","keys","result","errors","all","map","key","ValidationError","length","expected","got"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAiBgBA,W,GAAAA,W;;AAfhB;;AACA;;AACA;;;;IAEaC,e,WAAAA,e;;;AAKX,2BAAYC,MAAZ,EAAuBC,KAAvB,EAA4D;AAAA;;AAAA,wJACpD,QADoD,EAC1CA,KAD0C;;AAE1D,UAAKD,MAAL,GAAcA,MAAd;AAF0D;AAG3D;;;EALOE,qB;;AAQH,SAASJ,WAAT,CACLK,CADK,EAEsD;AAAA;;AAC3D,MAAMC,KAAK,IAAIL,eAAJ,CAAoBI,CAApB;AAAA,wFAAuB,kBAAME,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACtBC,gBADsB;AAAA;AAAA,qBACID,CADJ;;AAAA;AAAA;AAC1BE,eAD0B,gBACXC,QADW;AAE1BC,kBAF0B,GAEnB,oBAAYN,CAAZ,CAFmB;AAG1BO,oBAH0B,GAGjB,EAHiB;AAI1BC,oBAJ0B,GAIjB,EAJiB;AAAA;AAAA,qBAK1B,kBAAQC,GAAR,CACJH,KAAKI,GAAL;AAAA,qGAAS,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEeX,EAAEW,GAAF,EAAOb,KAAP,CAAaM,EAAEO,GAAF,CAAb,CAFf;;AAAA;AAELJ,iCAAOI,GAAP,CAFK;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCAID,uBAAaC,gCAJZ;AAAA;AAAA;AAAA;;AAI6BJ,iCAAOG,GAAP;AAJ7B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAT;;AAAA;AAAA;AAAA;AAAA,kBADI,CAL0B;;AAAA;AAAA,mBAe5B,mCAA2BH,MAA3B,EAAmCK,MAfP;AAAA;AAAA;AAAA;;AAAA,6BAgBpBD,gCAhBoB;AAAA,6BAgBQX,EAhBR;AAAA;AAAA,qBAgBuBG,CAhBvB;;AAAA;AAAA;AAAA,6BAgB0BI,MAhB1B;AAAA;AAgBFM,wBAhBE;AAgBYC,mBAhBZ;AAgB0BP,sBAhB1B;AAAA;AAAA;;AAAA;AAAA,gDAiBzBD,MAjByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;AAAA,MAAX;AAmBA,SAAON,EAAP;AACD","file":"asyncObject.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"../sync/ValidationError\";\nimport { AsyncType } from \"./AsyncType\";\nimport { objectType } from \"../sync/base\";\n\nexport class AsyncObjectType<\n  S: { [key: string]: AsyncType<any> },\n  T: $ObjMap<S, <F>(v: AsyncType<F>) => F>\n> extends AsyncType<T> {\n  schema: S;\n  constructor(schema: S, parse: (value: mixed) => Promise<T>) {\n    super(\"object\", parse);\n    this.schema = schema;\n  }\n}\n\nexport function asyncObject<S: { [key: string]: AsyncType<any> }>(\n  s: S\n): AsyncObjectType<S, $ObjMap<S, <F>(v: AsyncType<F>) => F>> {\n  const os = new AsyncObjectType(s, async v => {\n    const o = objectType.validate(await v);\n    const keys = Object.keys(s);\n    const result = {};\n    const errors = {};\n    await Promise.all(\n      keys.map(async key => {\n        try {\n          result[key] = await s[key].parse(o[key]);\n        } catch (e) {\n          if (e instanceof ValidationError) errors[key] = e;\n          else throw e;\n        }\n      })\n    );\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: os, got: await o, errors });\n    return result;\n  });\n  return os;\n}\n"]}