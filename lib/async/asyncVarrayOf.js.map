{"version":3,"sources":["../../src/async/asyncVarrayOf.js"],"names":["asyncVarrayOf","AsyncVArrayOfType","t","validate","innerType","AsyncVType","aof","v","a","arrayType","errors","all","map","item","index","ValidationError","String","length","expected","got"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAegBA,a,GAAAA,a;;AAbhB;;AAEA;;AACA;;;;IAEaC,iB,WAAAA,iB;;;AAEX,6BAAYC,CAAZ,EAA8BC,QAA9B,EAA6E;AAAA;;AAAA,4JACrE,SADqE,EAC1DA,QAD0D;;AAE3E,UAAKC,SAAL,GAAiBF,CAAjB;AAF2E;AAG5E;;;EALuCG,uB;;AAQnC,SAASL,aAAT,CAA0BE,CAA1B,EAAkE;AAAA;;AACvE,MAAMI,MAAM,IAAIL,iBAAJ,CAAsBC,CAAtB;AAAA,wFAAyB,kBAAMK,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,eAD6B,GACzBC,qBAAUN,QAAV,CAAmBI,CAAnB,CADyB;AAE7BG,oBAF6B,GAEZ,EAFY;AAAA;AAAA,qBAG7B,kBAAQC,GAAR,CACJH,EAAEI,GAAF;AAAA,qGAAM,iBAAOC,IAAP,EAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEIZ,EAAEC,QAAF,CAAWU,IAAX,CAFJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCAIE,uBAAaE,gCAJf;AAAA;AAAA;AAAA;;AAKAL,iCAAOM,OAAOF,KAAP,CAAP;AALA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAN;;AAAA;AAAA;AAAA;AAAA,kBADI,CAH6B;;AAAA;AAAA,mBAc/B,mCAA2BJ,MAA3B,EAAmCO,MAdJ;AAAA;AAAA;AAAA;;AAAA,oBAe3B,IAAIF,gCAAJ,CAAoB,EAAEG,UAAUZ,GAAZ,EAAiBa,KAAKZ,CAAtB,EAAyBG,cAAzB,EAApB,CAf2B;;AAAA;AAAA,gDAgB1BF,CAhB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA,MAAZ;AAkBA,SAAOF,GAAP;AACD","file":"asyncVarrayOf.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"../sync/ValidationError\";\nimport type { Errors } from \"../sync/ValidationError\";\nimport { arrayType } from \"../sync/arrayType\";\nimport { AsyncVType } from \"./AsyncVType\";\n\nexport class AsyncVArrayOfType<T> extends AsyncVType<Array<T>> {\n  innerType: AsyncVType<T>;\n  constructor(t: AsyncVType<T>, validate: (value: mixed) => Promise<Array<T>>) {\n    super(\"arrayOf\", validate);\n    this.innerType = t;\n  }\n}\n\nexport function asyncVarrayOf<T>(t: AsyncVType<T>): AsyncVArrayOfType<T> {\n  const aof = new AsyncVArrayOfType(t, async v => {\n    const a = arrayType.validate(v);\n    const errors: Errors = {};\n    await Promise.all(\n      a.map(async (item, index) => {\n        try {\n          await t.validate(item);\n        } catch (e) {\n          if (e instanceof ValidationError)\n            errors[String(index)] = (e: ValidationError);\n          else throw e;\n        }\n      })\n    );\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: aof, got: v, errors });\n    return ((a: any): Array<T>); // eslint-disable-line flowtype/no-weak-types\n  });\n  return aof;\n}\n"]}