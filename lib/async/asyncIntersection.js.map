{"version":3,"sources":["../../src/async/asyncIntersection.js"],"names":["asyncIntersection","a","b","AsyncIntersectionType","v","parse"],"mappings":";;;;;;;;;;;;;;QAIgBA,iB,GAAAA,iB;;AAFhB;;;;AAEO,SAASA,iBAAT,CACLC,CADK,EAELC,CAFK,EAGwB;AAAA;;AAC7B,SAAO,IAAIC,gCAAJ,CAA0BF,CAA1B,EAA6BC,CAA7B;AAAA,wFAAgC,iBAAME,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC/BH,EAAEI,KAAF,CAAQD,CAAR,CAD+B;;AAAA;AAAA;AAAA,qBAE/BF,EAAEG,KAAF,CAAQD,CAAR,CAF+B;;AAAA;AAAA,+CAG5BA,CAH4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA;AAAA;AAAA;AAAA,MAAP;AAKD","file":"asyncIntersection.js","sourcesContent":["// @flow\n\nimport { AsyncType, AsyncIntersectionType } from \"./AsyncType\";\n\nexport function asyncIntersection<A, B>(\n  a: AsyncType<A>,\n  b: AsyncType<B>\n): AsyncIntersectionType<A, B> {\n  return new AsyncIntersectionType(a, b, async v => {\n    await a.parse(v);\n    await b.parse(v); // TODO: which one to take? how to merge\n    return ((v: any): A & B); // eslint-disable-line flowtype/no-weak-types\n  });\n}\n"]}