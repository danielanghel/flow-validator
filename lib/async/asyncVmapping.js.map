{"version":3,"sources":["../../src/async/asyncVmapping.js"],"names":["asyncVmapping","AsyncVMappingType","keys","values","validate","AsyncVType","m","v","o","objectType","ks","errors","all","map","key","value","ke","ve","ValidationError","length","expected","got"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAoBgBA,a,GAAAA,a;;AAlBhB;;AACA;;AACA;;;;IAEaC,iB,WAAAA,iB;;;AAGX,6BACEC,IADF,EAEEC,MAFF,EAGEC,QAHF,EAIE;AAAA;;AAAA,4JACM,SADN,EACiBA,QADjB;;AAEA,UAAKF,IAAL,GAAYA,IAAZ;AACA,UAAKC,MAAL,GAAcA,MAAd;AAHA;AAID;;;EAX0CE,uB;;AActC,SAASL,aAAT,CACLE,IADK,EAELC,MAFK,EAGoB;AAAA;;AACzB,MAAMG,IAAI,IAAIL,iBAAJ,CAAsBC,IAAtB,EAA4BC,MAA5B;AAAA,wFAAoC,kBAAMI,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCC,eADsC,GAClCC,iBAAWL,QAAX,CAAoBG,CAApB,CADkC;AAEtCG,gBAFsC,GAEjC,oBAAYF,CAAZ,CAFiC;AAGtCG,oBAHsC,GAG7B,EAH6B;AAAA;AAAA,qBAItC,kBAAQC,GAAR,CACJF,GAAGG,GAAH;AAAA,qGAAO,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,+BADD,GACSP,EAAEM,GAAF,CADT;AAEDE,4BAFC;AAGDC,4BAHC;AAAA;AAAA;AAAA,iCAKGf,KAAKE,QAAL,CAAcU,GAAd,CALH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCAOC,uBAAaI,gCAPd;AAAA;AAAA;AAAA;;AAO+BF;AAP/B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,iCAWGb,OAAOC,QAAP,CAAgBW,KAAhB,CAXH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCAaC,uBAAaG,gCAbd;AAAA;AAAA;AAAA;;AAa+BD;AAb/B;AAAA;;AAAA;AAAA;;AAAA;AAgBL,8BAAID,MAAMC,EAAV,EAAc;AACZN,mCAAOG,GAAP,IAAc,EAAEA,KAAKE,EAAP,EAAWD,OAAOE,EAAlB,EAAd;AACD;;AAlBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAAA;AAAA;AAAA;AAAA,kBADI,CAJsC;;AAAA;AAAA,mBA0BxC,mCAA2BN,MAA3B,EAAmCQ,MA1BK;AAAA;AAAA;AAAA;;AAAA,oBA2BpC,IAAID,gCAAJ,CAAoB,EAAEE,UAAUd,CAAZ,EAAee,KAAKd,CAApB,EAAuBI,cAAvB,EAApB,CA3BoC;;AAAA;AAAA,gDA4BnCJ,CA5BmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;;AAAA;AAAA;AAAA;AAAA,MAAV;AA8BA,SAAOD,CAAP;AACD","file":"asyncVmapping.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"../sync/ValidationError\";\nimport { AsyncVType } from \"./AsyncVType\";\nimport { objectType } from \"../sync/base\";\n\nexport class AsyncVMappingType<K, V> extends AsyncVType<{ [key: K]: V }> {\n  keys: AsyncVType<K>;\n  values: AsyncVType<V>;\n  constructor(\n    keys: AsyncVType<K>,\n    values: AsyncVType<V>,\n    validate: (value: mixed) => Promise<{ [key: K]: V }>\n  ) {\n    super(\"mapping\", validate);\n    this.keys = keys;\n    this.values = values;\n  }\n}\n\nexport function asyncVmapping<K: string, V>(\n  keys: AsyncVType<K>,\n  values: AsyncVType<V>\n): AsyncVMappingType<K, V> {\n  const m = new AsyncVMappingType(keys, values, async v => {\n    const o = objectType.validate(v);\n    const ks = Object.keys(o);\n    const errors = {};\n    await Promise.all(\n      ks.map(async key => {\n        const value = o[key];\n        let ke;\n        let ve;\n        try {\n          await keys.validate(key);\n        } catch (e) {\n          if (e instanceof ValidationError) ke = e;\n          else throw e;\n        }\n        try {\n          await values.validate(value);\n        } catch (e) {\n          if (e instanceof ValidationError) ve = e;\n          else throw e;\n        }\n        if (ke || ve) {\n          errors[key] = { key: ke, value: ve };\n        }\n      })\n    );\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: m, got: v, errors });\n    return ((v: any): { [key: K]: V }); // eslint-disable-line flowtype/no-weak-types\n  });\n  return m;\n}\n"]}