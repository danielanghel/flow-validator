{"version":3,"sources":["../../src/sync/base.js"],"names":["instanceOf","classOf","literal","empty","VType","v","ValidationError","expected","got","isNull","isUndefined","noProperty","isMixed","isAny","number","boolean","objectType","Array","isArray","functionType","c","iof","InstanceOfType","cof","ClassOfType","f","validate","prototype","value","lt","LiteralType","truthy","Type","Boolean","falsy"],"mappings":"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","file":"base.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"./ValidationError\";\nimport { VType, InstanceOfType, ClassOfType, LiteralType } from \"./VType\";\nimport { Type } from \"./Type\";\n\nexport const empty: VType<void | null> = new VType(\"empty\", v => {\n  if (v === null || v === void 0) return v;\n  throw new ValidationError({ expected: empty, got: v });\n});\n\nexport const isNull: VType<null> = new VType(\"null\", v => {\n  if (v === null) return v;\n  throw new ValidationError({ expected: isNull, got: v });\n});\n\nexport const isUndefined: VType<void> = new VType(\"undefined\", v => {\n  if (v === void 0) return v;\n  throw new ValidationError({ expected: isUndefined, got: v });\n});\n\nexport const noProperty: VType<void> = new VType(\"noProperty\", v => {\n  if (v === void 0) return v;\n  throw new ValidationError({ expected: isUndefined, got: v });\n});\n\nexport const isMixed: VType<mixed> = new VType(\"mixed\", v => v);\n\nexport const isAny: VType<any> = new VType(\"any\", v => v);\n\nexport const number: VType<number> = new VType(\"number\", v => {\n  if (typeof v === \"number\") return v;\n  throw new ValidationError({ expected: number, got: v });\n});\n\nexport const boolean: VType<boolean> = new VType(\"boolean\", v => {\n  if (typeof v === \"boolean\") return v;\n  throw new ValidationError({ expected: boolean, got: v });\n});\n\nexport const objectType: VType<Object> = new VType(\"Object\", v => {\n  if (typeof v === \"object\" && !!v && !Array.isArray(v)) return v;\n  throw new ValidationError({ expected: objectType, got: v });\n});\n\nexport const functionType: VType<Function> = new VType(\"Function\", v => {\n  if (typeof v === \"function\") return v;\n  throw new ValidationError({ expected: functionType, got: v });\n});\n\nexport function instanceOf<T>(c: Class<T>): InstanceOfType<T> {\n  const iof = new InstanceOfType(c, v => {\n    if (v instanceof c) return v;\n    throw new ValidationError({ expected: iof, got: v });\n  });\n  return iof;\n}\n\nexport function classOf<T>(c: Class<T>): ClassOfType<Class<T>> {\n  const cof = new ClassOfType(c, v => {\n    const f = functionType.validate(v);\n    if (f === c || f.prototype instanceof c) return f;\n    throw new ValidationError({ expected: cof, got: v });\n  });\n  return cof;\n}\n\ntype LiteralTypeValue = string | number | boolean;\nexport function literal<T: LiteralTypeValue>(value: T): LiteralType<T> {\n  const lt = new LiteralType(value, v => {\n    if (value === v) return ((v: any): T); // eslint-disable-line flowtype/no-weak-types\n    throw new ValidationError({ expected: lt, got: v });\n  });\n  return lt;\n}\n\nexport const truthy: Type<true> = new Type(\"truthy\", v => {\n  if (Boolean(v) === true) return true;\n  throw new ValidationError({ expected: truthy, got: v });\n});\n\nexport const falsy: Type<false> = new Type(\"falsy\", v => {\n  if (Boolean(v) === false) return false;\n  throw new ValidationError({ expected: falsy, got: v });\n});\n"]}