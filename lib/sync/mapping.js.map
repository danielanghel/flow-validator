{"version":3,"sources":["../../src/sync/mapping.js"],"names":["mapping","keys","values","m","MappingType","o","objectType","validate","v","ks","result","errors","key","value","kv","vv","ke","ve","parse","e","ValidationError","length","expected","got"],"mappings":";;;;;;;;;;;;;;;;;;QAMgBA,O,GAAAA,O;;AAJhB;;AACA;;AACA;;;;AAEO,SAASA,OAAT,CACLC,IADK,EAELC,MAFK,EAGc;AACnB,MAAMC,IAAI,IAAIC,iBAAJ,CAAgBH,IAAhB,EAAsBC,MAAtB,EAA8B,aAAK;AAC3C,QAAMG,IAAIC,iBAAWC,QAAX,CAAoBC,CAApB,CAAV;AACA,QAAMC,KAAK,oBAAYJ,CAAZ,CAAX;AACA,QAAMK,SAAS,EAAf;AACA,QAAMC,SAAS,EAAf;AAJ2C;AAAA;AAAA;;AAAA;AAK3C,sDAAkBF,EAAlB,4GAAsB;AAAA,YAAXG,GAAW;;AACpB,YAAMC,QAAQR,EAAEO,GAAF,CAAd;AACA,YAAIE,WAAJ;AACA,YAAIC,WAAJ;AACA,YAAIC,WAAJ;AACA,YAAIC,WAAJ;AACA,YAAI;AACFH,eAAKb,KAAKiB,KAAL,CAAWN,GAAX,CAAL;AACD,SAFD,CAEE,OAAOO,CAAP,EAAU;AACV,cAAIA,aAAaC,gCAAjB,EAAkCJ,KAAKG,CAAL,CAAlC,KACK,MAAMA,CAAN;AACN;AACD,YAAI;AACFJ,eAAKb,OAAOgB,KAAP,CAAaL,KAAb,CAAL;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU;AACV,cAAIA,aAAaC,gCAAjB,EAAkCH,KAAKE,CAAL,CAAlC,KACK,MAAMA,CAAN;AACN;AACD,YAAIH,MAAMC,EAAV,EAAc;AACZN,iBAAOC,GAAP,IAAc,EAAEA,KAAKI,EAAP,EAAWH,OAAOI,EAAlB,EAAd;AACD,SAFD,MAEO,IAAIH,EAAJ,EAAQJ,OAAOI,EAAP,IAAaC,EAAb;AAChB;AA1B0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2B3C,QAAI,mCAA2BJ,MAA3B,EAAmCU,MAAvC,EACE,MAAM,IAAID,gCAAJ,CAAoB,EAAEE,UAAUnB,CAAZ,EAAeoB,KAAKf,CAApB,EAAuBG,cAAvB,EAApB,CAAN;AACF,WAAOD,MAAP;AACD,GA9BS,CAAV;AA+BA,SAAOP,CAAP;AACD","file":"mapping.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"./ValidationError\";\nimport { Type, MappingType } from \"./Type\";\nimport { objectType } from \"./base\";\n\nexport function mapping<K: string, V>(\n  keys: Type<K>,\n  values: Type<V>\n): MappingType<K, V> {\n  const m = new MappingType(keys, values, v => {\n    const o = objectType.validate(v);\n    const ks = Object.keys(o);\n    const result = {};\n    const errors = {};\n    for (const key of ks) {\n      const value = o[key];\n      let kv;\n      let vv;\n      let ke;\n      let ve;\n      try {\n        kv = keys.parse(key);\n      } catch (e) {\n        if (e instanceof ValidationError) ke = e;\n        else throw e;\n      }\n      try {\n        vv = values.parse(value);\n      } catch (e) {\n        if (e instanceof ValidationError) ve = e;\n        else throw e;\n      }\n      if (ke || ve) {\n        errors[key] = { key: ke, value: ve };\n      } else if (kv) result[kv] = vv;\n    }\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: m, got: v, errors });\n    return result;\n  });\n  return m;\n}\n"]}