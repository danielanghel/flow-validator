{"version":3,"sources":["../../src/sync/takes.js"],"names":["takes","Vtakes","types","paramsValidator","params","f","apply","parse","validate"],"mappings":";;;;;QA+CgBA,K,GAAAA,K;QAkDAC,M,GAAAA,M;;AA/FhB;;AACA;;AACA;;AAwC2E;;AAE3E;;;AAxCA;;AAqCoD;AAI7C,SAASD,KAAT,GAE4D;AAAA,oCAD9DE,KAC8D;AAD9DA,SAC8D;AAAA;;AACjE,MAAMC,kBAAkB,kBAAOD,KAAP,CAAxB;AACA,SAAO;AAAA,WACL,YAAoB;AAAA,yCAARE,MAAQ;AAARA,cAAQ;AAAA;;AAClB,aAAOC,EAAEC,KAAF,CAAQ,IAAR,EAAcH,gBAAgBI,KAAhB,CAAsBH,MAAtB,CAAd,CAAP;AACD,KAHI;AAAA,GAAP;AAID,C,CAsCmD;;;AACyB;;AAE7E;AACO,SAASH,MAAT,GAE4D;AAAA,qCAD9DC,KAC8D;AAD9DA,SAC8D;AAAA;;AACjE,MAAMC,kBAAkB,mBAAQD,KAAR,CAAxB;AACA,SAAO;AAAA,WACL,YAAoB;AAAA,yCAARE,MAAQ;AAARA,cAAQ;AAAA;;AAClB,aAAOC,EAAEC,KAAF,CAAQ,IAAR,EAAcH,gBAAgBK,QAAhB,CAAyBJ,MAAzB,CAAd,CAAP;AACD,KAHI;AAAA,GAAP;AAID","file":"takes.js","sourcesContent":["// @flow\n\nimport { Type } from \"./Type\";\nimport { VType } from \"./VType\";\nimport { tuple, Vtuple } from \"./tuple\";\n\n/* eslint-disable no-redeclare */\n\ndeclare function takes<P, P2, P3, P4, P5, P6, R>(\n  t: Type<P>,\n  t2: Type<P2>,\n  t3: Type<P3>,\n  t4: Type<P4>,\n  t5: Type<P5>,\n  t6: Type<P6> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6) => R\n) => (p: P, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6) => R;\ndeclare function takes<P, P2, P3, P4, P5, R>(\n  t: Type<P>,\n  t2: Type<P2>,\n  t3: Type<P3>,\n  t4: Type<P4>,\n  t5: Type<P5> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4, p5: P5) => R\n) => (p: P, p2: P2, p3: P3, p4: P4, p5: P5) => R;\ndeclare function takes<P, P2, P3, P4, R>(\n  t: Type<P>,\n  t2: Type<P2>,\n  t3: Type<P3>,\n  t4: Type<P4> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4) => R\n) => (p: P, p2: P2, p3: P3, p4: P4) => R;\ndeclare function takes<P, P2, P3, R>(\n  t: Type<P>,\n  t2: Type<P2>,\n  t3: Type<P3> // eslint-disable-line no-redeclare\n): (f: (p: P, p2: P2, p3: P3) => R) => (p: P, p2: P2, p3: P3) => R;\ndeclare function takes<P, P2, R>(\n  t: Type<P>,\n  t2: Type<P2>\n): (f: (p: P, p2: P2) => R) => (p: P, p2: P2) => R; // eslint-disable-line no-redeclare\ndeclare function takes<P, R>(t: Type<P>): (f: (p: P) => R) => (p: P) => R; // eslint-disable-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nexport function takes<R>(\n  ...types: Array<Type<any>>\n): (f: (...props: Array<any>) => R) => (...props: Array<any>) => R {\n  const paramsValidator = tuple((types: any));\n  return f =>\n    function(...params) {\n      return f.apply(this, paramsValidator.parse(params));\n    };\n}\n\ndeclare function Vtakes<P, P2, P3, P4, P5, P6, R>(\n  t: VType<P>,\n  t2: VType<P2>,\n  t3: VType<P3>,\n  t4: VType<P4>,\n  t5: VType<P5>,\n  t6: VType<P6> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6) => R\n) => (p: P, p2: P2, p3: P3, p4: P4, p5: P5, p6: P6) => R;\n\ndeclare function Vtakes<P, P2, P3, P4, P5, R>(\n  t: VType<P>,\n  t2: VType<P2>,\n  t3: VType<P3>,\n  t4: VType<P4>,\n  t5: VType<P5> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4, p5: P5) => R\n) => (p: P, p2: P2, p3: P3, p4: P4, p5: P5) => R;\ndeclare function Vtakes<P, P2, P3, P4, R>(\n  t: VType<P>,\n  t2: VType<P2>,\n  t3: VType<P3>,\n  t4: VType<P4> // eslint-disable-line no-redeclare\n): (\n  f: (p: P, p2: P2, p3: P3, p4: P4) => R\n) => (p: P, p2: P2, p3: P3, p4: P4) => R;\ndeclare function Vtakes<P, P2, P3, R>(\n  t: VType<P>,\n  t2: VType<P2>,\n  t3: VType<P3> // eslint-disable-line no-redeclare\n): (f: (p: P, p2: P2, p3: P3) => R) => (p: P, p2: P2, p3: P3) => R;\ndeclare function Vtakes<P, P2, R>(\n  t: VType<P>,\n  t2: VType<P2>\n): (f: (p: P, p2: P2) => R) => (p: P, p2: P2) => R; // eslint-disable-line no-redeclare\ndeclare function Vtakes<P, R>(t: VType<P>): (f: (p: P) => R) => (p: P) => R; // eslint-disable-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nexport function Vtakes<R>(\n  ...types: Array<VType<any>>\n): (f: (...props: Array<any>) => R) => (...props: Array<any>) => R {\n  const paramsValidator = Vtuple((types: any));\n  return f =>\n    function(...params) {\n      return f.apply(this, paramsValidator.validate(params));\n    };\n}\n"]}