{"version":3,"sources":["../../src/sync/string.js"],"names":["StringType","parse","dt","s","string","v","date","Date","Object","prototype","toString","call","isNaN","getTime","ValidationError","expected","got","description","Type","em","validate","isEmail","test","length","mls","regularExpression","rgx","String","VType"],"mappings":"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","file":"string.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"./ValidationError\";\nimport { Type } from \"./Type\";\nimport { VType } from \"./VType\";\n\nexport class StringType extends VType<string> {\n  constructor(parse: (value: mixed) => string) {\n    super(\"string\", parse);\n  }\n  isValidDate(): StringType {\n    const dt = new StringType(v => {\n      const s = string.parse(v);\n      const date: Date = new Date(s);\n      if (Object.prototype.toString.call(date) === \"[object Date]\") {\n        if (isNaN(date.getTime())) {\n          throw new ValidationError({ expected: dt, got: v });\n        } else {\n          return s;\n        }\n      } else {\n        throw new ValidationError({\n          expected: dt,\n          got: v,\n          description: \"invalid date\"\n        });\n      }\n    });\n    return dt;\n  }\n  toDate(): Type<Date> {\n    const dt = new Type(\"date\", v => {\n      const s = string.parse(v);\n      const date: Date = new Date(s);\n      if (Object.prototype.toString.call(date) === \"[object Date]\") {\n        if (isNaN(date.getTime())) {\n          throw new ValidationError({ expected: dt, got: v });\n        } else {\n          return date;\n        }\n      } else {\n        throw new ValidationError({\n          expected: dt,\n          got: v,\n          description: \"invalid date\"\n        });\n      }\n    });\n    return dt;\n  }\n  isEmail(): StringType {\n    const em = new StringType(v => {\n      const s = string.validate(v); // eslint-disable-next-line no-useless-escape\n      const isEmail = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i.test(\n        s\n      );\n      if (isEmail) return s;\n      throw new ValidationError({\n        expected: em,\n        got: v,\n        description: \"invalid email\"\n      });\n    });\n    return em;\n  }\n  minLength(length: number): StringType {\n    const mls = new StringType(v => {\n      const s = this.validate(v);\n      if (s.length < length)\n        throw new ValidationError({\n          expected: mls,\n          got: v,\n          description: `at least ${length} chars`\n        });\n      return s;\n    });\n    return mls;\n  }\n  maxLength(length: number): StringType {\n    const mls = new StringType(v => {\n      const s = this.validate(v);\n      if (s.length > length)\n        throw new ValidationError({\n          expected: mls,\n          got: v,\n          description: `at most ${length} chars`\n        });\n      return s;\n    });\n    return mls;\n  }\n  regexp(regularExpression: RegExp): StringType {\n    const rgx = new StringType(v => {\n      const s = this.validate(v);\n      if (!regularExpression.test(s))\n        throw new ValidationError({\n          expected: rgx,\n          got: v,\n          description: `expected to match regexp ${String(regularExpression)}`\n        });\n      return s;\n    });\n    return rgx;\n  }\n}\n\nexport const string: StringType = new StringType(v => {\n  if (typeof v === \"string\") return v;\n  throw new ValidationError({ expected: string, got: v });\n});\n"]}