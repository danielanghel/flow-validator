{"version":3,"sources":["../../src/sync/tuple.js"],"names":["tuple","Vtuple","s","tt","TupleType","a","arrayType","validate","v","result","errors","i","length","parse","e","ValidationError","String","expected","got","VTupleType"],"mappings":";;;;;;;;;;QAyBgBA,K,GAAAA,K;QAuCAC,M,GAAAA,M;;AA9DhB;;AAEA;;AACA;;AACA;;;;AAiB6D;;AAf7D;;AAI4B;AAGA;AAGA;AAGH;AACmD;AAGrE,SAASD,KAAT,CACLE,CADK,EAE0C;AAC/C;AACA,MAAMC,KAAK,IAAIC,eAAJ,CAAcF,CAAd,EAAiB,aAAK;AAC/B,QAAMG,IAAIC,qBAAUC,QAAV,CAAmBC,CAAnB,CAAV;AACA,QAAMC,SAAS,EAAf;AACA,QAAMC,SAAiB,EAAvB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,EAAEU,MAAtB,EAA8BD,GAA9B,EAAmC;AACjC,UAAI;AACFF,eAAOE,CAAP,IAAYT,EAAES,CAAF,EAAKE,KAAL,CAAWR,EAAEM,CAAF,CAAX,CAAZ;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIA,aAAaC,gCAAjB,EACEL,OAAOM,OAAOL,CAAP,CAAP,IAAqBG,CAArB,CADF,KAEK,MAAMA,CAAN;AACN;AACF;AACD,QAAI,mCAA2BJ,MAA3B,EAAmCE,MAAvC,EACE,MAAM,IAAIG,gCAAJ,CAAoB,EAAEE,UAAUd,EAAZ,EAAgBe,KAAKb,CAArB,EAAwBK,cAAxB,EAApB,CAAN;AACF,WAAOD,MAAP;AACD,GAhBU,CAAX;AAiBA,SAAON,EAAP;AACD,C,CAIkC;AAGH;AAGH;AAGH;AACsD;AAChB;;AAEzD,SAASF,MAAT,CACLC,CADK,EAE2C;AAChD;AACA,MAAMC,KAAK,IAAIgB,iBAAJ,CAAejB,CAAf,EAAkB,aAAK;AAChC,QAAMG,IAAIC,qBAAUC,QAAV,CAAmBC,CAAnB,CAAV;AACA,QAAME,SAAiB,EAAvB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,EAAEU,MAAtB,EAA8BD,GAA9B,EAAmC;AACjC,UAAI;AACFT,UAAES,CAAF,EAAKJ,QAAL,CAAcF,EAAEM,CAAF,CAAd;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIA,aAAaC,gCAAjB,EACEL,OAAOM,OAAOL,CAAP,CAAP,IAAqBG,CAArB,CADF,KAEK,MAAMA,CAAN;AACN;AACF;AACD,QAAI,mCAA2BJ,MAA3B,EAAmCE,MAAvC,EACE,MAAM,IAAIG,gCAAJ,CAAoB,EAAEE,UAAUd,EAAZ,EAAgBe,KAAKb,CAArB,EAAwBK,cAAxB,EAApB,CAAN;AACF,WAAOL,CAAP;AACD,GAfU,CAAX;AAgBA,SAAOF,EAAP;AACD","file":"tuple.js","sourcesContent":["// @flow\n\nimport { ValidationError } from \"./ValidationError\";\nimport type { Errors } from \"./ValidationError\";\nimport { Type, TupleType } from \"./Type\";\nimport { VType, VTupleType } from \"./VType\";\nimport { arrayType } from \"./arrayType\";\n\n/* eslint-disable no-redeclare */\n\ndeclare function tuple<A, B, C, D, E, F>(\n  types: [Type<A>, Type<B>, Type<C>, Type<E>, Type<F>]\n): TupleType<[A, B, C, E]>; // eslint-disable-line no-redeclare\ndeclare function tuple<A, B, C, D, E>(\n  types: [Type<A>, Type<B>, Type<C>, Type<E>]\n): TupleType<[A, B, C, E]>; // eslint-disable-line no-redeclare\ndeclare function tuple<A, B, C, D>(\n  types: [Type<A>, Type<B>, Type<C>, Type<D>]\n): TupleType<[A, B, C, D]>; // eslint-disable-line no-redeclare\ndeclare function tuple<A, B, C>(\n  types: [Type<A>, Type<B>, Type<C>]\n): TupleType<[A, B, C]>; // eslint-disable-line no-redeclare\ndeclare function tuple<A, B>(types: [Type<A>, Type<B>]): TupleType<[A, B]>; // eslint-disable-line no-redeclare\ndeclare function tuple<A>(types: [Type<A>]): TupleType<[A]>; // eslint-disable-line no-redeclare\n\nexport function tuple<S: Array<Type<any>>>(\n  s: S\n): TupleType<$TupleMap<S, <T>(v: Type<T>) => T>> {\n  // eslint-disable-line no-redeclare\n  const tt = new TupleType(s, v => {\n    const a = arrayType.validate(v);\n    const result = [];\n    const errors: Errors = {};\n    for (let i = 0; i < s.length; i++) {\n      try {\n        result[i] = s[i].parse(a[i]);\n      } catch (e) {\n        if (e instanceof ValidationError)\n          errors[String(i)] = (e: ValidationError);\n        else throw e;\n      }\n    }\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: tt, got: a, errors });\n    return result;\n  });\n  return tt;\n}\n\ndeclare function Vtuple<A, B, C, D, E, F>(\n  types: [VType<A>, VType<B>, VType<C>, VType<D>, VType<E>, VType<F>]\n): VTupleType<[A, B, C, D, E, F]>; // eslint-disable-line no-redeclare\ndeclare function Vtuple<A, B, C, D, E>(\n  types: [VType<A>, VType<B>, VType<C>, VType<D>, VType<E>]\n): VTupleType<[A, B, C, D, E]>; // eslint-disable-line no-redeclare\ndeclare function Vtuple<A, B, C, D>(\n  types: [VType<A>, VType<B>, VType<C>, VType<D>]\n): VTupleType<[A, B, C, D]>; // eslint-disable-line no-redeclare\ndeclare function Vtuple<A, B, C>(\n  types: [VType<A>, VType<B>, VType<C>]\n): VTupleType<[A, B, C]>; // eslint-disable-line no-redeclare\ndeclare function Vtuple<A, B>(types: [VType<A>, VType<B>]): VTupleType<[A, B]>; // eslint-disable-line no-redeclare\ndeclare function Vtuple<A>(types: [VType<A>]): VTupleType<[A]>; // eslint-disable-line no-redeclare\n\nexport function Vtuple<S: Array<VType<any>>>(\n  s: S\n): VTupleType<$TupleMap<S, <T>(v: Type<T>) => T>> {\n  // eslint-disable-line no-redeclare\n  const tt = new VTupleType(s, v => {\n    const a = arrayType.validate(v);\n    const errors: Errors = {};\n    for (let i = 0; i < s.length; i++) {\n      try {\n        s[i].validate(a[i]);\n      } catch (e) {\n        if (e instanceof ValidationError)\n          errors[String(i)] = (e: ValidationError);\n        else throw e;\n      }\n    }\n    if (Object.getOwnPropertyNames(errors).length)\n      throw new ValidationError({ expected: tt, got: a, errors });\n    return a;\n  });\n  return tt;\n}\n"]}